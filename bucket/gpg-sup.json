{
    "homepage": "https://gnupg.org",
    "version": "4.4.1",
    "license": "GPLv3",
    "url": "https://files.gpg4win.org/gpg4win-4.4.1.exe#/dl.7z",
    "hash": "de25e1d2b08c12506ac5dcc62dcd849f6ce973237837a1cc367e51f25ef517d8",
    "bin": [
        "GnuPG/bin/gpg.exe",
        [
            "GnuPG/bin/gpg.exe",
            "gpg2"
        ],
        "GnuPG/bin/gpgconf.exe",
        "GnuPG/bin/gpgsm.exe",
        "GnuPG/bin/gpgtar.exe",
        "GnuPG/bin/gpgv.exe",
        "GnuPG/bin/gpg-connect-agent.exe",
        "GnuPG/bin/gpg-agent.exe",
        "bin/kleopatra.exe",
        "bin/paperkey.exe"
    ],
    "shortcuts": [
        [
            "bin/kleopatra.exe",
            "kleopatra"
        ]
    ],
    "persist": ".gnupg",
    "pre_install": [
        "# GnuPGHOME",
        "# * use 'pre_install' (or 'post_install') instead of 'env_set' so that `scoop` doesn't remove the variable if/when uninstalled",
        "# respect USER value, if defined",
        "if ($env:GnuPGHOME) { } else {",
        "    # otherwise, 1st existing known default; otherwise, 1st of known defaults",
        "    $default_dirs = @( \"$persist_dir\\.gnupg\", \"$env:APPDATA\\gnupg\", \"$env:USERPROFILE\\.gnupg\", \"$env:USERPROFILE\\.keydb\" )",
        "    $val = @( $($default_dirs |% { get-item $_ -ea silent }), $default_dirs[0] ) | select -first 1",
        "    # ensure directory exists",
        "    new-item $val -type directory -force | out-null",
        "    # add to environment",
        "    [System.Environment]::SetEnvironmentVariable('GnuPGHOME', $val, [System.EnvironmentVariableTarget]::User)",
        "    $env:GnuPGHOME = [System.Environment]::GetEnvironmentVariable('GnuPGHOME', [System.EnvironmentVariableTarget]::User)",
        "}",
        "Get-Item \"$dir\\`$TEMP\\*-bin.exe\" |% { $n = $_.name ; $d = \"$dir\\`$TEMP\\$n\"; Write-Host -NoNewLine \"extracting `\"$n`\"...\"; 7z.exe x \"$d\" -o\"$dir\\GnuPG\" -y; Write-Host 'done' ; }"
    ],
    "pre_uninstall": [
        "& cmd @('/c','taskkill /F /T /IM kleopatra.exe 1>NUL 2>NUL')",
        "& cmd @('/c','taskkill /F /T /IM paperkey.exe 1>NUL 2>NUL')",
        "& cmd @('/c','taskkill /F /T /IM dbus-daemon.exe 1>NUL 2>NUL')",
        "& cmd @('/c','taskkill /F /T /IM dirmngr.exe 1>NUL 2>NUL')",
        "if (Get-Process -Name \"gpg-agent\" -ErrorAction SilentlyContinue) { gpg-connect-agent killagent /bye 1>$null 2>$null }",
        "& cmd @('/c','taskkill /F /T /IM gpg-connect-agent.exe 1>NUL 2>NUL')",
        "& cmd @('/c','taskkill /F /T /IM keyboxd.exe 1>NUL 2>NUL')",
        "& cmd @('/c','taskkill /F /T /IM scdaemon.exe 1>NUL 2>NUL')"
    ],
    "checkver": {
        "url": "https://www.gpg4win.org/download.html",
        "re": "Gpg4win ([0-9.]+)"
    },
    "autoupdate": {
        "url": "https://files.gpg4win.org/gpg4win-$version.exe#/dl.7z",
        "hash": {
            "url": "https://www.gpg4win.org/download.html",
            "regex": "SHA256.*<code>($sha256)</code>"
        }
    },
    "notes": [
        "You should restart this shell session to enable \"GnuPG\" environment variable before use gpg command.",
        "To avoid creating unwanted directories."
    ]
}
